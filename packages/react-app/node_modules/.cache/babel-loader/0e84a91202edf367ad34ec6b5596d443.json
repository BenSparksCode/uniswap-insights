{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Projects\\\\uniswap-insights\\\\packages\\\\react-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport logo from \"./ethereumLogo.png\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { MAINNET_ID, addresses, abis } from \"@uniswap-insights/contracts\";\nimport \"./App.css\";\nimport { Button } from \"./components/Button\"; // See more example queries on https://thegraph.com/explorer/subgraph/uniswap/uniswap-v2\n\nconst GET_AGGREGATED_UNISWAP_DATA = gql`\n  {\n    uniswapFactories(first: 1) {\n      pairCount\n      totalVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`;\n\nasync function readOnChainData() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = getDefaultProvider(); // Create an instance of an ethers.js Contract\n  // Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/\n\n  const daiWethExchangeContract = new Contract(addresses[MAINNET_ID].pairs[\"DAI-WETH\"], abis.pair, defaultProvider); // Reserves held in the DAI-WETH pair contract\n\n  const reserves = await daiWethExchangeContract.getReserves();\n  console.log({\n    reserves\n  });\n}\n\nfunction App() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_AGGREGATED_UNISWAP_DATA);\n  React.useEffect(() => {\n    if (!loading && !error && data && data.uniswapFactories) {\n      console.log({\n        uniswapFactories: data.uniswapFactories\n      });\n    }\n  }, [loading, error, data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-4xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Tailwind Test\"), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Ben/Projects/uniswap-insights/packages/react-app/src/App.js"],"names":["React","logo","Contract","getDefaultProvider","gql","useQuery","MAINNET_ID","addresses","abis","Button","GET_AGGREGATED_UNISWAP_DATA","readOnChainData","defaultProvider","daiWethExchangeContract","pairs","pair","reserves","getReserves","console","log","App","loading","error","data","useEffect","uniswapFactories"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,QAA4C,6BAA5C;AACA,OAAO,WAAP;AAEA,SAASC,MAAT,QAAuB,qBAAvB,C,CAEA;;AACA,MAAMC,2BAA2B,GAAGN,GAAI;;;;;;;;CAAxC;;AAUA,eAAeO,eAAf,GAAiC;AAC/B;AACA,QAAMC,eAAe,GAAGT,kBAAkB,EAA1C,CAF+B,CAG/B;AACA;;AACA,QAAMU,uBAAuB,GAAG,IAAIX,QAAJ,CAAaK,SAAS,CAACD,UAAD,CAAT,CAAsBQ,KAAtB,CAA4B,UAA5B,CAAb,EAAsDN,IAAI,CAACO,IAA3D,EAAiEH,eAAjE,CAAhC,CAL+B,CAM/B;;AACA,QAAMI,QAAQ,GAAG,MAAMH,uBAAuB,CAACI,WAAxB,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;AACD;;AAED,SAASI,GAAT,GAAe;AACb,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BlB,QAAQ,CAACK,2BAAD,CAAzC;AAEAV,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACH,OAAD,IAAY,CAACC,KAAb,IAAsBC,IAAtB,IAA8BA,IAAI,CAACE,gBAAvC,EAAyD;AACvDP,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,QAAAA,gBAAgB,EAAEF,IAAI,CAACE;AAAzB,OAAZ;AACD;AACF,GAJD,EAIG,CAACJ,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,CAJH;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,IAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAYD;;AAED,eAAeH,GAAf","sourcesContent":["import React from \"react\";\nimport logo from \"./ethereumLogo.png\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { MAINNET_ID, addresses, abis } from \"@uniswap-insights/contracts\";\nimport \"./App.css\";\n\nimport { Button } from \"./components/Button\";\n\n// See more example queries on https://thegraph.com/explorer/subgraph/uniswap/uniswap-v2\nconst GET_AGGREGATED_UNISWAP_DATA = gql`\n  {\n    uniswapFactories(first: 1) {\n      pairCount\n      totalVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`;\n\nasync function readOnChainData() {\n  // Should replace with the end-user wallet, e.g. Metamask\n  const defaultProvider = getDefaultProvider();\n  // Create an instance of an ethers.js Contract\n  // Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/\n  const daiWethExchangeContract = new Contract(addresses[MAINNET_ID].pairs[\"DAI-WETH\"], abis.pair, defaultProvider);\n  // Reserves held in the DAI-WETH pair contract\n  const reserves = await daiWethExchangeContract.getReserves();\n  console.log({ reserves });\n}\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_AGGREGATED_UNISWAP_DATA);\n\n  React.useEffect(() => {\n    if (!loading && !error && data && data.uniswapFactories) {\n      console.log({ uniswapFactories: data.uniswapFactories });\n    }\n  }, [loading, error, data]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <h1 className=\"text-4xl\">Tailwind Test</h1>\n\n        <Button></Button>\n\n       \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}